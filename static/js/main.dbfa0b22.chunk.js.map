{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","memo","user","name","email","className","href","TodoInfo","todo","id","title","completed","cn","TodoList","todos","map","username","preparedTodos","userId","usersFromServer","find","App","useState","setTodos","setTitle","selectedUser","setSelectedUser","isTitleValid","setIsTitleValid","isUserValid","setIsUserValid","action","method","onSubmit","event","preventDefault","Boolean","trim","currentTodos","userName","maxTodoId","Math","max","newUser","type","value","placeholder","onChange","target","replace","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dbfa0b22.chunk.js","sourcesContent":["import { FC, memo } from 'react';\nimport { User } from '../../types/User';\n\ninterface Props {\n  user: User;\n}\n\nexport const UserInfo: FC<Props> = memo(({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n});\n","import { FC, memo } from 'react';\nimport cn from 'classnames';\nimport { UserInfo } from '../UserInfo/UserInfo';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo;\n}\n\nexport const TodoInfo: FC<Props> = memo(({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={cn(\n        'TodoInfo',\n        {\n          'TodoInfo--completed': completed,\n        },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && (\n        <UserInfo user={user} />\n      )}\n    </article>\n  );\n});\n","import { FC, memo } from 'react';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: FC<Props> = memo(({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map((todo) => (\n      <TodoInfo key={todo.id} todo={todo} />\n    ))}\n  </section>\n));\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React, { useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nconst getUserById = (userId: number): User | null => (\n  usersFromServer.find((user) => (user.id === userId)) || null\n);\n\nconst getUserByName = (userName: string): User | null => (\n  usersFromServer.find((user) => (user.name === userName)) || null\n);\n\nconst preparedTodos: Todo[] = todosFromServer.map((todo) => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState(preparedTodos);\n  const [title, setTitle] = useState('');\n  const [selectedUser, setSelectedUser] = useState('');\n  const [isTitleValid, setIsTitleValid] = useState(true);\n  const [isUserValid, setIsUserValid] = useState(true);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setTitle(value.replace(/[^a-zA-Zа-яА-Я0-9\\s]/g, ''));\n    setIsTitleValid(Boolean(value));\n  };\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setSelectedUser(value);\n    setIsUserValid(Boolean(value));\n  };\n\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setIsTitleValid(Boolean(title.trim()));\n    setIsUserValid(Boolean(selectedUser));\n\n    if (!title.trim() || !selectedUser) {\n      return;\n    }\n\n    setTodos((currentTodos) => {\n      const maxTodoId = Math.max(...currentTodos.map(todo => todo.id));\n      const newUser = getUserByName(selectedUser);\n\n      return [\n        ...currentTodos,\n        {\n          id: maxTodoId + 1,\n          title,\n          completed: false,\n          userId: newUser ? newUser.id : null,\n          user: newUser,\n        },\n      ];\n    });\n\n    setTitle('');\n    setSelectedUser('');\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleFormSubmit}\n      >\n        <div className=\"field\">\n          <label>\n            {'Title: '}\n            <input\n              data-cy=\"titleInput\"\n              type=\"text\"\n              value={title}\n              placeholder=\"Enter a title\"\n              onChange={handleTitleChange}\n            />\n          </label>\n\n          {!isTitleValid && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n            <select\n              data-cy=\"userSelect\"\n              value={selectedUser}\n              onChange={handleUserChange}\n            >\n              <option value=\"\" disabled>\n                Choose a user\n              </option>\n\n              {usersFromServer.map((user) => (\n                <option key={user.id} value={user.name}>\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n\n          {!isUserValid && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}